const express = require('express');

const TelegramBot = require('node-telegram-bot-api');
const config = require('config');

const TOKEN = config.get("token");
const ANSWERS = config.get("answers");
const COIN = config.get("coin");

const SPECIAL_SYMBOLS = config.get("specialSymbols");
const DIGITS = config.get("digits");
const CHARS = config.get("chars");


const app = express();

app.get('/', (req, res) => res.send('Hello World!'));

const bot = new TelegramBot(TOKEN, {polling: true});

bot.onText(/\/start/, (msg, [source, match]) => {
    const {chat: {id}} = msg;
    bot.sendMessage(id, "–ü—Ä–∏–≤–µ—Ç–≤—Å—Ç—É–µ–º –≤ –º–∏—Ä–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏!!!", {
        "reply_markup": {
            "keyboard": [["–ß–∏—Å–ª–∞", "–ü–∞—Ä–æ–ª–∏"], ["–ú–æ–Ω–µ—Ç–∫–∞"], ["–í–æ–ª—à–µ–±–Ω—ã–π —à–∞—Ä"]]
        }
    });
    sendMessageGetInfoNumber(msg);
    sendMessageGetInfoPass(msg);
    sendMessageGetInfoCoin(msg);
    sendMessageGetInfoAnswer(msg);
});

bot.onText(/\/help/, msg => {
    sendMessageGetInfoNumber(msg);
    sendMessageGetInfoPass(msg);
    sendMessageGetInfoCoin(msg);
    sendMessageGetInfoAnswer(msg);
});

bot.onText(/\/q (.+)/, (msg) => {
    sendMessageAnswer(msg)
});
bot.onText(/\/q*$/, (msg) => {
    sendMessageAnswer(msg, "–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞");
});

bot.onText(/–ß–∏—Å–ª–∞/, (msg) => {
    sendMessageGetInfoNumber(msg);
});

bot.onText(/–ü–∞—Ä–æ–ª–∏/, (msg) => {
    sendMessageGetInfoPass(msg);
});

bot.onText(/–í–æ–ª—à–µ–±–Ω—ã–π —à–∞—Ä/, (msg) => {
    sendMessageGetInfoAnswer(msg);
});

bot.onText(/–ú–æ–Ω–µ—Ç–∫–∞/, (msg) => {
    sendMessageGetInfoCoin(msg);
});

bot.onText(/\/c*$/, (msg) => {
    const {chat: {id}} = msg;
    bot.sendMessage(id, "‚öñ " + COIN[getRandomInt(0, COIN.length)]);
});

function sendMessageNumber(msg, components, ...err) {
    const {chat: {id}} = msg;
    if (err.length) {
        bot.sendMessage(id, "üíØ " + err[0]);
    } else {
        let result = "";
        let i = 0;
        const min = +components[1], max = +components[2];
        while (i < +components[0]) {
            if (+components[0] === 1) {
                result += getRandomInt(min, max);
                break;
            } else {
                result += "\n " + ++i + ") " + getRandomInt(min, max);
            }
        }
        bot.sendMessage(id, "üíØ –†–µ–∑—É–ª—å—Ç–∞—Ç: " + result);
    }
}

bot.onText(/\/n (.+)/, (msg, [source, match]) => {
    const components = match.split(" ");

    if (components.length === 3 && components.every(isNature) && (+components[1]) < (+components[2])) {
        sendMessageNumber(msg, components);
    }
    else {
        sendMessageNumber(msg, "", "–ù–µ–≤–µ—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω—É–∂–Ω–æ:\n/n [—á–∏—Å–ª–æ, —Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª –≤—ã–≤–µ—Å—Ç–∏ –¥–æ 100] [–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –æ—Ç] [—á–∏—Å–ª–æ, –¥–æ]");
    }
});

bot.onText(/\/n*$/, (msg) => {
    sendMessageNumber(msg, "", "–ù–µ–≤–µ—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω—É–∂–Ω–æ:\n/n [—á–∏—Å–ª–æ, —Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª –≤—ã–≤–µ—Å—Ç–∏ –¥–æ 100] [–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –æ—Ç] [—á–∏—Å–ª–æ, –¥–æ]");
});


function sendMessagePassword(msg, components, ...err) {
    const {chat: {id}} = msg;
    if (err.length) {
        bot.sendMessage(id, "üîê " + err[0]);
    } else {
        let result = "\n";
        let i = 0;
        let isDigits = components[1] === "+", isSpecialSymbols = components[2] === "+";
        const str = CHARS + (isDigits ? DIGITS : "") + (isSpecialSymbols ? SPECIAL_SYMBOLS : "");
        const length = +components[0];
        while (i < length) {
            ++i;
            let bufferStr;
            if ((isDigits || isSpecialSymbols) && ((i + (isSpecialSymbols?1:0) + (isDigits?1:0)) > length)) {
                if (isDigits) {
                    bufferStr = DIGITS;
                }
                else if (isSpecialSymbols) {
                    bufferStr = SPECIAL_SYMBOLS;
                }
            } else {
                bufferStr = str;
            }
            let char = getRandomInt(0, bufferStr.length);

            if (isDigits && ~DIGITS.indexOf(bufferStr[char])) {
                isDigits = false;
            } else if (isSpecialSymbols && ~SPECIAL_SYMBOLS.indexOf(bufferStr[char])) {
                isSpecialSymbols = false;
            }
            result += bufferStr[char];
        }
        bot.sendMessage(id, "üîê: " + result);
    }
}

bot.onText(/\/p (.+)/, (msg, [source, match]) => {
    const components = match.split(" ");

    function isPlusMinus(el) {
        return el === "+" || el === "-";
    }

    if (components.length === 3 && isNature(components[0]) && +components[0] > 5 && +components[0] < 19 && isPlusMinus(components[1]) && isPlusMinus(components[2])) {
        sendMessagePassword(msg, components);
    }
    else {
        sendMessagePassword(msg, "", "–ù–µ–≤–µ—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω—É–∂–Ω–æ:\n/p [—á–∏—Å–ª–æ, —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤, –æ—Ç 6 - –¥–æ 18] +/-[–≤–∫–ª—é—á–∞—è —Ü–∏—Ñ—Ä—ã] +/-[–≤–∫–ª—é—á–∞—è —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã]");
    }
});

bot.onText(/\/p*$/, (msg) => {
    sendMessagePassword(msg, "", "–ù–µ–≤–µ—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω—É–∂–Ω–æ:\n/p [—á–∏—Å–ª–æ, —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤, –æ—Ç 6 - –¥–æ 18] +/-[–≤–∫–ª—é—á–∞—è —Ü–∏—Ñ—Ä—ã] +/-[–≤–∫–ª—é—á–∞—è —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã]");
});

bot.onText(/\/aim*$/, (msg) => {
    const {chat: {id}} = msg;
    bot.sendMessage(id, "üéØ " + "–î–∞–Ω–Ω—ã–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π –ö–∞—Ä–∞–±–∞–Ω–æ–≤–∞ –†–æ–º–∞–Ω–∞");
});

bot.onText(/\/thanks*$/, (msg) => {
    const {chat: {id}} = msg;
    bot.sendMessage(id, "ü§ôüèª" + "–ò–¥–µ—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –±—ã–ª–∞ —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–≤–∑–∞–∏–º—Å—Ç–æ–≤–∞–Ω–∞ —Å —Å–∞–π—Ç–∞ http://randstuff.ru/");
});


function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive
}

function isNature(el) {
    return Number.isInteger(+el) && +el > 0;
}

function sendMessageAnswer(msg, ...err) {
    const {chat: {id}} = msg;
    bot.sendMessage(id, "üé± " + (err.length ? err[0] : ANSWERS[getRandomInt(0, ANSWERS.length)]));
}

function sendMessageGetInfoNumber(msg) {
    const {chat: {id}} = msg;
    bot.sendMessage(id, "üíØ –≤—ã–≤–æ–¥ —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–æ–∑–æ–Ω–∞, —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞:\n /n [—á–∏—Å–ª–æ, —Å–∫–æ–ª—å–∫–æ —á–∏—Å–µ–ª –≤—ã–≤–µ—Å—Ç–∏] [—á–∏—Å–ª–æ, –æ—Ç] [—á–∏—Å–ª–æ, –¥–æ]");
}

function sendMessageGetInfoAnswer(msg) {
    const {chat: {id}} = msg;
    bot.sendMessage(id, "üé± –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤–æ–ª—à–µ–±–Ω–æ–º—É —à–∞—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n" + "/q [–≤–æ–ø—Ä–æ—Å]");
}

function sendMessageGetInfoPass(msg, err) {
    const {chat: {id}} = msg;
    bot.sendMessage(id, "üîê –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª—è:\n /p [—á–∏—Å–ª–æ, —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤, –æ—Ç 6 - –¥–æ 18] +/-[–≤–∫–ª—é—á–∞—è —Ü–∏—Ñ—Ä—ã] +/-[–≤–∫–ª—é—á–∞—è —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã]");
}

function sendMessageGetInfoCoin(msg, err) {
    const {chat: {id}} = msg;
    bot.sendMessage(id, "‚öñ –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø–æ–¥ —Ä—É–∫–æ–π –º–æ–Ω–µ—Ç–∫–∏, —á—Ç–æ–±—ã —Ä–∞—Å—Å—É–¥–∏—Ç—å —Å–ø–æ—Ä, —Ç–æ –∫–∏–Ω—å—Ç–µ –Ω–∞—à—É –º–æ–Ω–µ—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∏–≤:\n /c");
}

setTimeout(function wakeUp() {
    request("https://guarded-stream-85939.herokuapp.com", function() {
        console.log("WAKE UP DYNO");
    });
    return setTimeout(wakeUp, 1200000);
}, 1200000);

app.listen(process.env.PORT ||5000, () => console.log('Example app listening on port 5000!'));